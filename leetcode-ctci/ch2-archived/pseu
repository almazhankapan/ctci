def isUnique():
    hash={}
    for ch in string: 
        if ch in hash.keys():
            return False
        else: 
            hash[ch]=1

    for i in range(len(string)):
        char=string[i]
        for j in range(i,len(string)):
            if char==string[j]
                return False
    
    return True
wring! ! can be multiple counts of the same letter
def isPermut(s1,s2):
    map1={}
    for ch in s1:
        map1[ch]=1
    count=len(s2)
    for ch in s2:
        if ch in map1.keys()
            count-=1
        else
            return False
    if count!=0:
        return False
    else: 
        return True

urlify(s,len1):
    if len(s)!=len1: 
    s1=""
    count=0
        while(count!=len1):
            s1+=s[count]
    news=""
    for ch in s1:
        if ch!='%20':
            news+=str(ch) 
        else: 
            news+="%20” 

isPermPal(s): 
    count={}
    for ch in s:
        if ch!=" ":
            if ch in count.keys():
                count[ch]+=1
            else: 
                count[ch]=1
    ones=0
    for ch in count.keys():
        if count[ch]!==1:
            ones+=1
            if ones>1:
                return False
        if count[ch]!==1 or count[ch]!==2:
            return False
        
oneAway(s1,s2):
    if len(s1)==len(s2):
        return replace(s1,s2)
    elif len(s1)==len(s2)-1:
        return insert(s1,s2)
    elif len(s1)-1==len(s2):
        return insert(s2,s1)
    else: 
        return False
    
replace(s1,s2):
    i=0
    diff=0
    while(i<len(s1)):
        if s1[i]==s2[i]:
            i+=1
        else: 
            diff+=1
            if diff>1:
                return False
    if diff==1:
        return True
ple, pale
insert(s1,s2):
    i=0
    diff=0
    while(i<len(s1)):
        if s1[i]==s2[i]:
            i+=1
        else: 
            if i+1<len(s2):
                if s1[i]==s2[i+1]:
                    i+=1
                    diff+=1
                    if diff>1:
                        return False
                else: 
                    return False            
    if diff==1 or diff==0:
        return True
            
compress(s):
    s1=""
    count={}
    i=0
    for i in range(len(s)):
        if s[i]==s[i+1]:
            if s[i] in count.keys():
                count[s[i]]=1
            else: 
                count[s[i]]+=1
        else: 
            s1+=str(s[i])+str(count[s[i]])

12345678
k=3
45678

findKth(head, k):
    h=self.head
    h2=self.head

    while(k!=0):
        k-=1
        h=h.next
    
    while(h!=None):
        h2=h2.next
        h=h.next
    
    return h2.value
    



























        

    
    


        

