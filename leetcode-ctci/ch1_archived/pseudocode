ex 1.1

def isUnique(string1):
    occur={}
    for c in string1:
        occur[c]++ ---- not in python, should be occur[c]+=1
        if occur[c]>1:
            return false ---should be False

! forgot to fill in values of the hash table--can't just do +=1 when it's not yet initialized

for c in string1:
    occur[c]=0

ex 1.2

def isPermutation(str1,str2):
    if len(str1)!= len(str2):
        return False

    for c in str1:
        if c not in str2:
            return False
    
    return True

ex 1.3

def urlify(string1, length):  
    replaced=""
    if len(string1)>length: 
        trim(string1)--should be string1.strip()
        string1=string1.strip()---should reassign again
    
    for c in string1:
        if isspace(c):--incorrect---should be c.isspace()
            replaced.append("%20")----should be replaced +="%20” 
        else: 
            replaced.append(c)----should be replaced +=c
    
ex 1.4

def isPalindromePerm(string1):
    occur={}
    string1=(string1.strip()).lowercase()-----remember--should be lower() not lowercase()
    
    for c in string1:
        if not c.isspace():
            occur[c]=0
    
    for c in string1:
        if not c.isspace():
            occur[c]+=1
    ones=0
    for count in occur: ---should be occur.values()
        if count %2 != 0:
            if count==1:
                ones+=1
                if ones>1:
                    return False
            else: 
                return False
        
ex 1.5 

def isOneEdit(str1,str2):
    diff=0
    if(abs(len(str1)-len(str2))>1):
        return False
    else: 
        for c in str1:
            if c not in str2:
                diff+=1
                if (diff>1):
                    return False
        
        return True

ex 1.6

def compress(str1):
    occur={}
    for c in str1:
        occur[c]=0
    
    for c in str1:
        occur[c]+=1
    
    replace=""
    for r in occur.items():
        replace+=r.key+r.value ----r is a tuple and it should be r[0] - key and r[1] - value
    
    if len(replace)>len(str1):
        return str1
    else: 
        return replace

ex 1.6

def compress(str1):
    occur={}
    for c in str1:
        occur[c]=[]

    index=-1
    for c in str1:
        index+=1
        #if this char appears first time
        if (len(occur[c])==0):
            occur[c].append(1)
        else: 
        #if it's not first time and previous char was the same
            if (index>0 and str1.charAt(index)==str1.charAt(index-1)):---use and instead of &&
                occur[c][-1]+=1
            else: 
                occur[c].append(1)

ex 1.8

def zeroMatrix(matrix):
    for row in matrix: 
        for column in matrix: 
            if matrix[row][column]==0:
                targetRow=row
                targetColumn=column
                break
    
    for row in matrix: 
        matrix[row][targetColumn]=0
        if row==targetRow: 
            for c in matrix[targetRow]
                matrix[targetRow][c]=0

    for row in matrix: 
        print("[")
        for c in matrix[row]:
            print(c)
        print("],")

    
        



            




   
   




        