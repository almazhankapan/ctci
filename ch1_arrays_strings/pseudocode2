hash implementation

hash_table=[[] for i in range(100)]

def insert(hash_table, target_key):
    exists=False
    for index, tuple in enumerate(hash_table):--not hash_table, only bucket
    for index
        key, value=tuple
        if (target_key==key): 
            exists=True
            break
        if (exists):
            hash_table[i]

correct: 

def insert(hash_table, key, value) :
    exists=False
    hash_key=hash(key) % len(hash_table)
    bucket=hash_table[hash_key]
    for i, tuple in bucket: 
        k,v=tuple
        if k==key: 
            exists=True
            break
    if exists: 
        hash_table[hash_key][i]=((key, value)) #notice double parenthesis
    else: 
        hash_table[hash_key].append((key, value))

#ex 1,1

def isUnique(string):
    occur={}
    for char in string: 
        hash_table[char]=0
    
    for char in string: 
        hash_table[char]+=1
        if (hash_table[char]>1):
            return False
    
    return True

if no data structures--sort the string and compare neighboring characters

def isPermutation(str1,str2):
    if (len(str1)!=len(str2)):
        return False
    occur1={}
    occur2
    for char in str1:
        occur1[char]+=1 
        if char not in str2:
            return False
    
    for char in str2:
        occur2[char]+=1 
        if char not in str1:
            return False
    
    for char in str1:
        if occur1[char]!=occur2[char]:
            return False

    O(n) time,  O(n) space

def urlify(string, length):
    string=strip(string)
    replace=""
    for i in range(len(string)): 
        if (! isspace(string[i])):
            replace[i]=string[i]
        if (isspace(string[i])):
            replace[i]="%20"
    diff=len(string)-length
    if (diff>0):
        add=" " * diff
        replace+=add
        

def
        


        
            


    

